"pathogen 插件开启
execute pathogen#infect()
"====================laststatus 设置
set laststatus=2
"=======================================快捷键设置
map b  :bn<CR>
map p  :bp<CR>
map w  w
map d  :bdelete<CR>
map 1  :buffer 1<CR>
map 2  :buffer 2<CR>
map 3  :buffer 3<CR>
map 4  :buffer 4<CR>
map 5  :buffer 5<CR>
map 6  :buffer 6<CR>
map 7  :buffer 7<CR>
map 8  :buffer 8<CR>
map f  :bfirst<CR>
map l  :blast<CR>
map >  4>
map <  4<
map -  4-
map =  4+
map q  q
map s  :split<CR>
map v  :vsplit<CR>
nmap a ggVG
cmap a" let @a=@"
"==========================================================O
set showcmd
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
"打开回到上次位置
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
"检测文件类型
filetype off
set number  
"针对不同的文件类型采用不同的缩进格式
filetype indent on
"允许插件
filetype plugin on
"启动自动补全
filetype plugin indent on
"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
set t_ti= t_te=
" 取消换行。
set nowrap
"括号配对情况
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2
"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 随着键入即时搜索
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"===============================有关Vundle的配置
set nocompatible
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"=======================================rainbow
let g:rainbow_active = 1 
"======================================================superTab
"let g:SuperTabDefaultCompletionType="context" 
let g:SuperTabRetainCompletionType=1
let g:SuperTabDefaultCompletionType="<C-X><C-O>"
"================================================syntastic 配置
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
"======================================================
"==========================================================设置默认添加代码
autocmd BufNewFile *.py,*.c,*.sh,*.java,*.php,*.html,*.cpp,*.h exec ":call SetTitle()"  
func SetTitle()  
	
	if expand("%:e") == 'cpp'  
		call setline(1,"#include <iostream>")  
		call setline(2,"")  
		call setline(3,"using namespace std;")  
		call setline(4,"")  
		call setline(5,"int main()")
		call setline(6,"{")
		call setline(7,"	cout <<\"Hello world!\" << endl;")
		call setline(8,"")
		call setline(9,"	return 0;")
		call setline(10,"}")
	endif  

	if expand("%:e") == 'c'
		let g:SuperTabDefaultCompletionType="<C-P>"
		call setline(1,"#include <stdio.h>")  
		call setline(2,"int main() {")  
		call setline(3,"")  
		call setline(4,	"	return 0;")  
		call setline(5,"}")  
	endif

	if expand("%:e") == 'java'
		call setline(1,"public class {")  
		call setline(2,"	public static void main(String args[]){")  
		call setline(3,"	}")  
		call setline(4,"}")  
	endif

	if expand("%:e") == 'sh'
		"call setline(1,"#!/bin/sh")  
		let g:SuperTabDefaultCompletionType="<C-P>"
	endif
	if expand("%:e") == 'py'
		"call setline(1,"#!/bin/sh")  
		call setline(1,"#coding=utf-8")
	endif
	
	if expand("%:e") == 'h'
		call setline(1,"#ifndef <>")
		call setline(2,"#define <>")  
		call setline(3,"")  
		call setline(4,"#endif ")  
	endif

	if expand("%:e") == 'php'
		let g:SuperTabDefaultCompletionType="<C-X><C-O>"
		"call setline(1,"<html>")
		"call setline(2,"<title> page </title>")
		"call setline(3,"<body>")
		call setline(1,"<?php")
		call setline(2,"?>")
		"call setline(6,"</body>")
		"call setline(7,"</html>")
	endif
	if expand("%:e") == 'html'
		call setline(1,"<html>")
		call setline(2,"<head>")
		call setline(3,"<title> page </title>")
		call setline(4,"</head>")
		call setline(5,"<body>")
		call setline(6,"</body>")
		call setline(7,"</html>")
	endif

endfunc  
"=============================================youcompleteme
set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	"回车即选中当前项
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
" 跳转到定义处
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <F6> :YcmForceCompileAndDiagnostics<CR>	"force recomile with syntastic
" nnoremap <leader>lo :lopen<CR>	"open locationlist
" nnoremap <leader>lc :lclose<CR>	"close locationlist
inoremap <leader><leader> <C-x><C-o>

let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" 不显示开启vim时检查ycm_extra_conf文件的信息  
let g:ycm_confirm_extra_conf=0
" 开启基于tag的补全，可以在这之后添加需要的标签路径  
let g:ycm_collect_identifiers_from_tags_files=1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 输入第3个字符开始补全
let g:ycm_min_num_of_chars_for_completion=2
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax=1
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 设置在下面几种格式的文件上屏蔽ycm
let g:ycm_filetype_blacklist = {
			\ 'tagbar' : 1,
			\ 'nerdtree' : 1,
			\}
"youcompleteme  默认tab  s-tab 和 ultisnips 冲突
let g:ycm_key_list_select_completion = ['<c-n>','<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>','<Up>']
" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
"let g:ycm_key_invoke_completion = '<M-;>'
"==================================================UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-e>"
"===============================================折叠保存设置
"au BufWinLeave  * silent mkview
"au BufWinEnter  * silent loadview
"----------------------------------------------------
set showcmd
